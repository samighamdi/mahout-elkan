package org.apache.mahout.clustering.elkan;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.util.Iterator;

import org.apache.mahout.math.Matrix;
import org.apache.mahout.math.Vector;
import org.apache.mahout.math.VectorWritable;
import org.apache.mahout.math.function.DoubleDoubleFunction;
import org.apache.mahout.math.function.DoubleFunction;

/**
 * This class serves as a decorator to other Vectors. It is mainly used in the
 * Elkan Vector Mapping step to attribute a unique id to every vector in the 
 * dataset.
 */

public class ElkanVector implements Vector {
	
	private Vector delegate;
	private Vector lowerLimits;
	private double upperLimit;
	private int clusterId;	
	private boolean calculateDistance;
	private Cluster cluster;

	public ElkanVector() {
	}
	
	public ElkanVector(Vector delegate)
	{
		this.delegate=delegate;
	}
	
	@Override
	public String asFormatString() {
		return delegate.asFormatString();
	}

	@Override
	public Vector assign(double value) {
		return delegate.assign(value);
	}

	@Override
	public Vector assign(double[] values) {
		return delegate.assign(values);
	}

	@Override
	public Vector assign(Vector other) {
		return delegate.assign(other);
	}

	@Override
	public Vector assign(DoubleFunction function) {
		return delegate.assign(function);
	}

	@Override
	public Vector assign(Vector other, DoubleDoubleFunction function) {
		return delegate.assign(other, function);
	}

	@Override
	public Vector assign(DoubleDoubleFunction f, double y) {
		return delegate.assign(f, y);
	}

	@Override
	public int size() {
		return delegate.size();
	}

	@Override
	public boolean isDense() {
		return delegate.isDense();
	}

	@Override
	public boolean isSequentialAccess() {
		return delegate.isSequentialAccess();
	}

	@Override
	public Iterator<Element> iterator() {
		return delegate.iterator();
	}

	@Override
	public Iterator<Element> iterateNonZero() {
		return delegate.iterateNonZero();
	}

	@Override
	public Element getElement(int index) {
		return delegate.getElement(index);
	}

	@Override
	public Vector divide(double x) {
		return delegate.divide(x);
	}

	@Override
	public double dot(Vector x) {
		return delegate.dot(x);
	}

	@Override
	public double get(int index) {
		return delegate.get(index);
	}

	@Override
	public double getQuick(int index) {
		return delegate.getQuick(index);
	}

	@Override
	public Vector like() {
		return delegate.like();
	}

	@Override
	public Vector minus(Vector x) {
		return delegate.minus(x);
	}

	@Override
	public Vector normalize() {
		return delegate.normalize();
	}

	@Override
	public Vector normalize(double power) {
		return delegate.normalize(power);
	}

	@Override
	public Vector logNormalize() {
		return delegate.logNormalize();
	}

	@Override
	public Vector logNormalize(double power) {
		return delegate.logNormalize(power);
	}

	@Override
	public double norm(double power) {
		return delegate.norm(power);
	}

	@Override
	public double minValue() {
		return delegate.minValue();
	}

	@Override
	public int minValueIndex() {
		return delegate.minValueIndex();
	}

	@Override
	public double maxValue() {
		return delegate.maxValue();
	}

	@Override
	public int maxValueIndex() {
		return delegate.maxValueIndex();
	}

	@Override
	public Vector plus(double x) {
		return delegate.plus(x);
	}

	@Override
	public Vector plus(Vector x) {
		return delegate.plus(x);
	}

	@Override
	public void set(int index, double value) {
		delegate.set(index, value);
	}

	@Override
	public void setQuick(int index, double value) {
		delegate.setQuick(index, value);
	}

	@Override
	public int getNumNondefaultElements() {
		return delegate.getNumNondefaultElements();
	}

	@Override
	public Vector times(double x) {
		return delegate.times(x);
	}

	@Override
	public Vector times(Vector x) {
		return delegate.times(x);
	}

	@Override
	public Vector viewPart(int offset, int length) {
		return delegate.viewPart(offset, length);
	}

	@Override
	public double zSum() {
		return delegate.zSum();
	}

	@Override
	public Matrix cross(Vector other) {
		return delegate.cross(other);
	}

	@Override
	public double aggregate(DoubleDoubleFunction aggregator, DoubleFunction map) {
		return delegate.aggregate(aggregator, map);
	}

	@Override
	public double aggregate(Vector other, DoubleDoubleFunction aggregator,
			DoubleDoubleFunction combiner) {
		return delegate.aggregate(other, aggregator, combiner);
	}

	@Override
	public double getLengthSquared() {
		return delegate.getLengthSquared();
	}

	@Override
	public double getDistanceSquared(Vector v) {
		return delegate.getDistanceSquared(v);
	}

	@Override
	public ElkanVector clone() {
		return new ElkanVector(delegate.clone());
	}
	
	public void write(DataOutput out) throws IOException
	{
		out.writeBoolean(calculateDistance);
		out.writeInt(clusterId);
		out.writeDouble(upperLimit);
		VectorWritable.writeVector(out, delegate);
		VectorWritable.writeVector(out, lowerLimits);		
	}
	
	public void read(DataInput in) throws IOException
	{
		this.calculateDistance=in.readBoolean();
		this.clusterId=in.readInt();
		this.upperLimit=in.readDouble();
		this.delegate=VectorWritable.readVector(in);
		this.lowerLimits=VectorWritable.readVector(in);
	}

	public Vector getLowerLimits() {
		return lowerLimits;
	}
	
	public void setLowerLimits(Vector lowerLimits){
		this.lowerLimits=lowerLimits;
	}

	public void setCenterDistances(Vector centerDistances) {
		this.lowerLimits = centerDistances;
	}

	public boolean isCalculateDistance() {
		return calculateDistance;
	}

	public void setCalculateDistance(boolean calculateDistance) {
		this.calculateDistance = calculateDistance;
	}

	public Vector getDelegate() {
		return delegate;
	}

	public void setDelegate(Vector delegate) {
		this.delegate = delegate;
	}

	public int getClusterId() {
		return clusterId;
	}

	public void setClusterId(int clusterId) {
		this.clusterId = clusterId;
	}

	public double getUpperLimit() {
		return upperLimit;
	}

	public void setUpperLimit(double upperLimit) {
		this.upperLimit = upperLimit;
	}

	public String toString(){
		return "l(x):"+lowerLimits.toString()+
				"- u(x):"+upperLimit+"- c(x):"+clusterId+" - r(x):"+calculateDistance;
	}


}
