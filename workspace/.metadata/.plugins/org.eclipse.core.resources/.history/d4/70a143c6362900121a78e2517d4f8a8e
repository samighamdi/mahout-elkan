package org.apache.mahout.clustering.elkan;

import java.io.IOException;
import java.net.URI;
import java.util.Arrays;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.filecache.DistributedCache;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.SequenceFile;
import org.apache.hadoop.io.Writable;
import org.apache.mahout.clustering.spectral.common.VectorCache;
import org.apache.mahout.common.HadoopUtil;
import org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterator;
import org.apache.mahout.math.Vector;
import org.apache.mahout.math.VectorWritable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.io.Closeables;

public class ElkanVectorCache {
	
	private static final Logger log = LoggerFactory.getLogger(VectorCache.class);

	  private VectorCache() {
	  }

	  /**
	   * 
	   * @param key SequenceFile key
	   * @param vector Vector to save, to be wrapped as VectorWritable
	   */
	  public static void save(Writable key,
	                          Vector vector,
	                          Path output,
	                          Configuration conf,
	                          boolean overwritePath,
	                          boolean deleteOnExit) throws IOException {
	    
	    FileSystem fs = FileSystem.get(output.toUri(), conf);
	    output = fs.makeQualified(output);
	    if (overwritePath) {
	      HadoopUtil.delete(conf, output);
	    }

	    // set the cache
	    DistributedCache.setCacheFiles(new URI[] {output.toUri()}, conf);
	    
	    // set up the writer
	    SequenceFile.Writer writer = new SequenceFile.Writer(fs, conf, output, 
	        IntWritable.class, VectorWritable.class);
	    try {
	      writer.append(key, new VectorWritable(vector));
	    } finally {
	      Closeables.closeQuietly(writer);
	    }

	    if (deleteOnExit) {
	      fs.deleteOnExit(output);
	    }
	  }
	  
	  /**
	   * Calls the save() method, setting the cache to overwrite any previous
	   * Path and to delete the path after exiting
	   */
	  public static void save(Writable key, Vector vector, Path output, Configuration conf) throws IOException {
	    save(key, vector, output, conf, true, true);
	  }
	  
	  /**
	   * Loads the vector from {@link DistributedCache}. Returns null if no vector exists.
	   */
	  public static Vector load(Configuration conf) throws IOException {
	    URI[] files = DistributedCache.getCacheFiles(conf);
	    if (files == null || files.length < 1) {
	      return null;
	    }
	    log.info("Files are: {}", Arrays.toString(files));
	    return load(conf, new Path(files[0].getPath()));
	  }
	  
	  /**
	   * Loads a Vector from the specified path. Returns null if no vector exists.
	   */
	  public static Vector load(Configuration conf, Path input) throws IOException {
	    log.info("Loading vector from: {}", input);
	    SequenceFileValueIterator<VectorWritable> iterator =
	        new SequenceFileValueIterator<VectorWritable>(input, true, conf);
	    try {
	      return iterator.next().get();
	    } finally {
	      Closeables.closeQuietly(iterator);
	    }
	  }

}
