package org.apache.mahout.clustering.elkan;

import java.io.IOException;
import java.util.Iterator;
import java.util.List;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.WritableComparable;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;
import org.apache.mahout.clustering.Cluster;
import org.apache.mahout.clustering.classify.ClusterClassifier;
import org.apache.mahout.clustering.iterator.ClusterIterator;
import org.apache.mahout.clustering.iterator.ClusteringPolicy;
import org.apache.mahout.clustering.kmeans.KMeansConfigKeys;
import org.apache.mahout.common.ClassUtils;
import org.apache.mahout.common.distance.DistanceMeasure;
import org.apache.mahout.math.DenseMatrix;
import org.apache.mahout.math.DenseVector;
import org.apache.mahout.math.MatrixSlice;
import org.apache.mahout.math.SequentialAccessSparseVector;
import org.apache.mahout.math.Vector;
import org.apache.mahout.math.hadoop.DistributedRowMatrix;
import org.apache.mahout.math.map.OpenHashMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ElkanStep1Job {

	public static int run(Path input, Path output, Configuration conf) {
		try {
			Job job = new Job(conf, "Calculate center distances job.");

			job.setMapperClass(ElkanStep1Mapper.class);
			job.setMapOutputKeyClass(Text.class);
			job.setMapOutputValueClass(ElkanVectorWritable.class);

			job.setReducerClass(Reducer.class);
			job.setOutputKeyClass(Text.class);
			job.setOutputValueClass(ElkanVectorWritable.class);

			job.setOutputFormatClass(SequenceFileOutputFormat.class);
			FileOutputFormat.setOutputPath(job, output);

			job.setInputFormatClass(SequenceFileInputFormat.class);
			FileInputFormat.setInputPaths(job, input);

			job.setJarByClass(ElkanStep1Job.class);

			job.waitForCompletion(true);
		} catch (Exception e) {
			System.err.println(e.getMessage());
			e.printStackTrace(System.err);
			return 1;
		}

		return 0;
	}

	public static class ElkanStep1Mapper
			extends
			Mapper<WritableComparable<?>, ElkanVectorWritable, WritableComparable<?>, ElkanVectorWritable> {

		private static final Logger log = LoggerFactory
				.getLogger(ElkanStep1Mapper.class);
		
		private ClusterClassifier classifier;

		private ClusteringPolicy policy;
		
		private Vector medianDistanceClusters;
		
		private DistanceMeasure measure;
		
		private OpenHashMap<Integer,Vector> clusterDistanceMatrix;

		@Override
		protected void setup(Context context) throws IOException,
				InterruptedException {
			Configuration conf = context.getConfiguration();
			String measureClass = conf.get(KMeansConfigKeys.DISTANCE_MEASURE_KEY);
		    measure = ClassUtils.instantiateAs(measureClass, DistanceMeasure.class);
			
			String priorClustersPath = conf.get(ClusterIterator.PRIOR_PATH_KEY);
			classifier = new ClusterClassifier();
			classifier.readFromSeqFiles(conf, new Path(priorClustersPath));
			policy = classifier.getPolicy();
			policy.update(classifier);
			
			int i=0;
			List<Cluster> models=classifier.getModels();
			medianDistanceClusters=new DenseVector(models.size());
			
			for (Cluster model:models)
			{
				Vector centerDistances=new DenseVector(models.size());
				int j=0;
				for (Cluster oth_model:models)
				{					
					centerDistances.setQuick(j, measure.distance(model.getCenter(), oth_model.getCenter()));
					j++;
				}
				
				double sCenter=centerDistances.minValue()/2;
				medianDistanceClusters.setQuick(i, sCenter);
				i++;
			}
			
			clusterDistanceMatrix=new OpenHashMap<Integer, Vector>(models.size());			
			Path clusterDistanceMatrixPath=new Path(conf.get(ElkanIterator.CENTROID_DISTANCES_PATH_KEY));
			Path clusterDistanceMatrixOutput=new Path(conf.get(ElkanIterator.CENTROID_DISTANCES_PATH_KEY)+"/output");
			DistributedRowMatrix rowMatrix=new DistributedRowMatrix(clusterDistanceMatrixPath,clusterDistanceMatrixOutput,
					models.size(),models.size());
			rowMatrix.setConf(conf);
			Iterator<MatrixSlice> it=rowMatrix.iterator();
			while (it.hasNext())
			{
				MatrixSlice slice=it.next();
				log.info("Distances for Cluster"+slice.index()+" - "+slice.vector().toString());
				clusterDistanceMatrix.put(slice.index(),slice.vector());
			}
			super.setup(context);
		}

		@Override
		protected void map(WritableComparable<?> key, ElkanVectorWritable value,
				Context context) throws IOException, InterruptedException {
			ElkanVector originVector = value.get();
			originVector.getClusterId();
			
			List<Cluster> models=classifier.getModels();
			if (originVector.getUpperLimit()>medianDistanceClusters.get(originVector.getClusterId()))
			{
				int i=0;
				for(Cluster model:models)
				{
					if (i!=originVector.getClusterId())
					{
						double lowerLimit=originVector.getLowerLimits().get(i);
						double upperLimit=originVector.getUpperLimit();
						Vector clusterVector=models.get(originVector.getClusterId()).getCenter();						
						double clusterDistance=clusterDistanceMatrix.get(model.getId());
								measure.distance(model.getCenter(), clusterVector);
						double curDist=0;
						if (upperLimit>lowerLimit && upperLimit>clusterDistance/2)
						{
							
							if (originVector.isCalculateDistance())
							{
								curDist=measure.distance(originVector, clusterVector);
								originVector.getLowerLimits().setQuick(i, curDist);
								originVector.setCalculateDistance(false);
							}
							else
							{
								curDist=originVector.getUpperLimit();
							}
						}
						
						if (curDist>lowerLimit || curDist > clusterDistance/2)
						{
							double newDist=measure.distance(model.getCenter(), originVector);
							originVector.getLowerLimits().setQuick(i, newDist);
							if (newDist<curDist)
							{
								originVector.setClusterId(i);
							}
						}
					}
					i++;
				}
				
			}
			//log.info(originVector.toString());
			context.write(key, new ElkanVectorWritable(originVector));
		}

	}

}
